name: Deploy to Azure Spring Cloud with Key Vault
on: [push]

env:
  AZURE_SUBSCRIPTION: ${{ secrets.AZURE_SUBSCRIPTION }} # customize this1
  RESOURCE_GROUP: asa-rg
  SPRING_CLOUD_SERVICE: asa-demo # customize this
  KEYVAULT: asa-hat-kv # customize this
  AZURE_ACR: acrasa
  CONTAINERAPP_ENVIRONMENT: asa-env
  # ==== APPS ====:
  API_GATEWAY: api-gateway
  ADMIN_SERVER: admin-server
  CUSTOMERS_SERVICE: customers-service
  VETS_SERVICE: vets-service
  VISITS_SERVICE: visits-service
  # ==== JARS ====:
  API_GATEWAY_JAR: spring-petclinic-api-gateway/target/spring-petclinic-api-gateway-2.5.1.jar
  ADMIN_SERVER_JAR: spring-petclinic-admin-server/target/spring-petclinic-admin-server-2.5.1.jar
  CUSTOMERS_SERVICE_JAR: spring-petclinic-customers-service/target/spring-petclinic-customers-service-2.5.1.jar
  VETS_SERVICE_JAR: spring-petclinic-vets-service/target/spring-petclinic-vets-service-2.5.1.jar
  VISITS_SERVICE_JAR: spring-petclinic-visits-service/target/spring-petclinic-visits-service-2.5.1.jar
  # ==== JAR BUILD PATHS ====:
  API_GATEWAY_PATH: spring-petclinic-api-gateway
  ADMIN_SERVER_PATH: spring-petclinic-admin-server
  CUSTOMERS_SERVICE_PATH: spring-petclinic-customers-service
  VETS_SERVICE_PATH: spring-petclinic-vets-service
  VISITS_SERVICE_PATH: spring-petclinic-visits-service
  CONFIG_SERVER_PATH: spring-petclinic-config-server
  DISCOVERY_SERVER_PATH: spring-petclinic-discovery-server
jobs:
  deploy-to-SpringApps:
    runs-on: ubuntu-latest
    steps:
    - name: Login with Key Vault SP
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Get service SP from Key Vault
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: ${{ env.KEYVAULT }}
        secrets: "AZURE-CREDENTIALS-FOR-SPRING"
      id: keyvaultaction
    
    - name: Get MySQL Secrets from Key Vault
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: ${{ env.KEYVAULT }}
        secrets: "MYSQL-SERVER-FULL-NAME,MYSQL-DATABASE-NAME,MYSQL-SERVER-ADMIN-LOGIN-NAME,MYSQL-SERVER-ADMIN-PASSWORD"
      id: mysqlsecrets
      
    - name: Login with Service SP
      uses: azure/login@v1
      with:
        creds: ${{ steps.keyvaultaction.outputs.AZURE-CREDENTIALS-FOR-SPRING }}
        
    - name: Checkout your repo
      uses: actions/checkout@v2
      
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven

    - name: maven build, clean
      run: |
        mvn clean package -DskipTests -Denv=cloud
      
    - name: Deploy api-gateway
      uses: Azure/spring-cloud-deploy@v1
      with:
        azure-subscription: ${{ env.AZURE_SUBSCRIPTION }}
        action: deploy
        service-name: ${{ env.SPRING_CLOUD_SERVICE }}
        app-name: ${{ env.API_GATEWAY }}
        use-staging-deployment: false
        package: ${{ github.workspace }}/${{ env.API_GATEWAY_JAR }}
        jvm-options: -Xms2048m -Xmx2048m -Dspring.profiles.active=mysql
    
    - name: Deploy admin-server
      uses:  Azure/spring-cloud-deploy@v1
      with:
        azure-subscription: ${{ env.AZURE_SUBSCRIPTION }}
        action: deploy
        service-name: ${{ env.SPRING_CLOUD_SERVICE }}
        app-name: ${{ env.ADMIN_SERVER }}
        use-staging-deployment: false
        package: ${{ github.workspace }}/${{ env.ADMIN_SERVER_JAR }}
        jvm-options: -Xms2048m -Xmx2048m -Dspring.profiles.active=mysql    

    - name: Deploy customers-service
      uses: Azure/spring-cloud-deploy@v1
      with:
        azure-subscription: ${{ env.AZURE_SUBSCRIPTION }}
        action: deploy
        service-name: ${{ env.SPRING_CLOUD_SERVICE }}
        app-name: ${{ env.CUSTOMERS_SERVICE }}
        use-staging-deployment: false
        package: ${{ github.workspace }}/${{ env.CUSTOMERS_SERVICE_JAR }}
        jvm-options: -Xms2048m -Xmx2048m -Dspring.profiles.active=mysql
        # Environment variables to be entered using the syntax '-key value'. Values containing spaces should be enclosed in double quotes.
        environment-variables: "-MYSQL_SERVER_FULL_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-FULL-NAME }} \
        -MYSQL_DATABASE_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-DATABASE-NAME }} \
        -MYSQL_SERVER_ADMIN_LOGIN_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-ADMIN-LOGIN-NAME }} \
        -MYSQL_SERVER_ADMIN_PASSWORD ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-ADMIN-PASSWORD }}"

    - name: Deploy vets-service
      uses: Azure/spring-cloud-deploy@v1
      with:
        azure-subscription: ${{ env.AZURE_SUBSCRIPTION }}
        action: deploy
        service-name: ${{ env.SPRING_CLOUD_SERVICE }}
        app-name: ${{ env.VETS_SERVICE }}
        use-staging-deployment: false
        package: ${{ github.workspace }}/${{ env.VETS_SERVICE_JAR }}
        jvm-options: -Xms2048m -Xmx2048m -Dspring.profiles.active=mysql
        # Environment variables to be entered using the syntax '-key value'. Values containing spaces should be enclosed in double quotes.
        environment-variables: "-MYSQL_SERVER_FULL_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-FULL-NAME }} \
        -MYSQL_DATABASE_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-DATABASE-NAME }} \
        -MYSQL_SERVER_ADMIN_LOGIN_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-ADMIN-LOGIN-NAME }} \
        -MYSQL_SERVER_ADMIN_PASSWORD ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-ADMIN-PASSWORD }}"    

    - name: Deploy visits-service
      uses: Azure/spring-cloud-deploy@v1
      with:
        azure-subscription: ${{ env.AZURE_SUBSCRIPTION }}
        action: deploy
        service-name: ${{ env.SPRING_CLOUD_SERVICE }}
        app-name: ${{ env.VISITS_SERVICE }}
        use-staging-deployment: false
        package: ${{ github.workspace }}/${{ env.VISITS_SERVICE_JAR }}
        jvm-options: -Xms2048m -Xmx2048m -Dspring.profiles.active=mysql
        # Environment variables to be entered using the syntax '-key value'. Values containing spaces should be enclosed in double quotes.
        environment-variables: "-MYSQL_SERVER_FULL_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-FULL-NAME }} \
        -MYSQL_DATABASE_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-DATABASE-NAME }} \
        -MYSQL_SERVER_ADMIN_LOGIN_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-ADMIN-LOGIN-NAME }} \
        -MYSQL_SERVER_ADMIN_PASSWORD ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-ADMIN-PASSWORD }}"
        
  Deploy-to-ContainerApps:

    runs-on: ubuntu-latest
    steps:
    - name: Login with Key Vault SP
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Get service SP from Key Vault
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: ${{ env.KEYVAULT }}
        secrets: "AZURE-CREDENTIALS-FOR-SPRING"
      id: keyvaultaction
    
    - name: Get MySQL Secrets from Key Vault
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: ${{ env.KEYVAULT }}
        secrets: "MYSQL-SERVER-FULL-NAME,MYSQL-DATABASE-NAME,MYSQL-SERVER-ADMIN-LOGIN-NAME,MYSQL-SERVER-ADMIN-PASSWORD"
      id: mysqlsecrets
      
    - name: Login with Service SP
      uses: azure/login@v1
      with:
        creds: ${{ steps.keyvaultaction.outputs.AZURE-CREDENTIALS-FOR-SPRING }}
        
    - name: Checkout your repo
      uses: actions/checkout@v2
      
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven

    - name: maven build, clean
      run: |
        mvn clean package -DskipTests -Denv=cloud

    - name: Build api-gateway container image
      run: docker build ${{ env.API_GATEWAY_PATH }}/. --file docker/Dockerfile --tag "${{ env.AZURE_ACR }}.azurecr.io/${{ env.API_GATEWAY }}:v1.${{ github.run_number }}"

    - name: Build admin-server container image
      run: docker build ${{ env.ADMIN_SERVER_PATH }}/. --file docker/Dockerfile --tag "${{ env.AZURE_ACR }}.azurecr.io/${{ env.ADMIN_SERVER }}:v1.${{ github.run_number }}"

    - name: Build customer-service container image
      run: docker build ${{ env.CUSTOMERS_SERVICE_PATH }}/. --file docker/Dockerfile --tag "${{ env.AZURE_ACR }}.azurecr.io/${{ env.CUSTOMERS_SERVICE }}:v1.${{ github.run_number }}"

    - name: Build vets-service container image
      run: docker build ${{ env.VETS_SERVICE_PATH: }}/. --file docker/Dockerfile --tag "${{ env.AZURE_ACR }}.azurecr.io/${{ env.VETS_SERVICE }}:v1.${{ github.run_number }}"

    - name: Build visits-service container image
      run: docker build ${{ env.VISITS_SERVICE_PATH: }}/. --file docker/Dockerfile --tag "${{ env.AZURE_ACR }}.azurecr.io/${{ env.VISITS_SERVICE }}:v1.${{ github.run_number }}"

    - name: Build discovery-server container image
      run: docker build ${{ env.DISCOVERY_SERVER_PATH: }}/. --file docker/Dockerfile --tag "${{ env.AZURE_ACR }}.azurecr.io/${{ env.DISCOVERY_SERVER }}:v1.${{ github.run_number }}"

    - name: Build config-server container image
      run: docker build ${{ env.CONFIG_SERVER_PATH: }}/. --file docker/Dockerfile --tag "${{ env.AZURE_ACR }}.azurecr.io/${{ env.CONFIG_SERVER }}:v1.${{ github.run_number }}"

    - name: Login to the Azure Container Registry  
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_ACR }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Push the api-gateway container image to ACR
      run: |
        docker push "${{ env.AZURE_ACR }}.azurecr.io/${{ env.API_GATEWAY }}:v1.${{ github.run_number }}"

    - name: Push the admin-server container image to ACR
      run: |
        docker push "${{ env.AZURE_ACR }}.azurecr.io/${{ env.ADMIN_SERVER }}:v1.${{ github.run_number }}"

    - name: Push the customer-service container image to ACR
      run: |
        docker push "${{ env.AZURE_ACR }}.azurecr.io/${{ env.CUSTOMERS_SERVICE }}:v1.${{ github.run_number }}"

    - name: Push the vets-service container image to ACR
      run: |
        docker push "${{ env.AZURE_ACR }}.azurecr.io/${{ env.VETS_SERVICE }}:v1.${{ github.run_number }}"

    - name: Push the visits-service container image to ACR
      run: |
        docker push "${{ env.AZURE_ACR }}.azurecr.io/${{ env.VISITS_SERVICE_PATH }}:v1.${{ github.run_number }}"

    - name: Push the discovery-server container image to ACR
      run: |
        docker push "${{ env.AZURE_ACR }}.azurecr.io/${{ env.DISCOVERY_SERVER }}:v1.${{ github.run_number }}"

    - name: Push the config-server container image to ACR
      run: |
        docker push "${{ env.AZURE_ACR }}.azurecr.io/${{ env.CONFIG_SERVER }}:v1.${{ github.run_number }}"


    - name: Deploy api-gateway to Container App
      uses: Azure/cli@v1
      with:
        inlineScript: |
          az config set extension.use_dynamic_install=yes_without_prompt

          az containerapp create \
            --name api-gateway \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image "${{ env.AZURE_ACR }}.azurecr.io/api-gateway:v1.${{ github.run_number }}" \
            --environment ${{ env.CONTAINERAPP_ENVIRONMENT }} \
            --registry-server ${{ env.AZURE_ACR }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --min-replicas 1 \
            --max-replicas 1 \
            --enable-dapr \
            --dapr-app-port 8080 \
            --dapr-app-id rating-api \
            --dapr-app-protocol http \
            --ingress external \
            --target-port 8080

